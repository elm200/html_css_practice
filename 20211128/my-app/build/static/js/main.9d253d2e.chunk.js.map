{"version":3,"sources":["utils/math-tools.ts","hooks/use-timer.tsx","components/Timer.tsx","containers/Timer.tsx","Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["getPrimes","maxRange","m","n","Array","keys","slice","filter","i","useTimer","limit","useState","timeLeft","setTimeLeft","primes","useMemo","timerId","useRef","tick","t","clearTimer","current","clearInterval","reset","useCallback","setInterval","useEffect","includes","Timer","isPrime","Card","className","Statistic","Label","Value","undefined","Content","Button","color","fluid","onClick","Icon","name","EnhancedTimer","Counter","title","initialCount","countObserver","console","log","count","setCount","c","App","setLimit","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d253d2e.chunk.js","sourcesContent":["const range = (m: number, n: number): number[] => [...Array(n).keys()].slice(m);\n\nexport const getPrimes = (maxRange: number): number[] =>\n  range(2, maxRange).filter((n) => {\n    for (let i = 2; i * i <= n; i++) {\n      if (n % i === 0) return false;\n    }\n    return true;\n  });\n\n","import { useCallback, useEffect, useMemo, useRef, useState } from \"react\";\nimport { getPrimes } from \"utils/math-tools\";\n\nconst useTimer = (limit: number): [number, boolean, () => void] => {\n  const [timeLeft, setTimeLeft] = useState(limit);\n  const primes = useMemo(() => getPrimes(limit), [limit]);\n  const timerId = useRef<NodeJS.Timeout>();\n  const tick = () => setTimeLeft((t) => t - 1);\n\n  const clearTimer = () => {\n    if (timerId.current) clearInterval(timerId.current);\n  };\n\n  const reset = useCallback(() => {\n    clearTimer();\n    timerId.current = setInterval(tick, 1000);\n    setTimeLeft(limit);\n  }, [limit]);\n\n  useEffect(() => {\n    reset();\n    return clearTimer;\n  }, [reset]);\n\n  useEffect(() => {\n    if (timeLeft === 0) reset();\n  }, [timeLeft, reset]);\n\n  return [timeLeft, primes.includes(timeLeft), reset];\n};\n\nexport default useTimer;\n","import { VFC } from \"react\";\nimport { Button, Card, Icon, Statistic } from \"semantic-ui-react\";\nimport \"./Timer.css\";\n\ntype Props = {\n  limit?: number;\n  timeLeft?: number;\n  isPrime?: boolean;\n  reset?: () => void;\n};\n\nconst Timer: VFC<Props> = ({\n  limit = 60,\n  timeLeft = 0,\n  isPrime = false,\n  reset = () => undefined,\n}) => (\n  <Card>\n    <div className=\"ui two statistics\">\n      <Statistic className=\"number-board\">\n        <Statistic.Label>limit</Statistic.Label>\n        <Statistic.Value>{limit}</Statistic.Value>\n      </Statistic>\n      <Statistic className=\"number-board\">\n        <Statistic.Label>time</Statistic.Label>\n        <Statistic.Value className={isPrime ? \"prime-number\" : undefined}>\n          {timeLeft}\n        </Statistic.Value>\n      </Statistic>\n    </div>\n    <Card.Content>\n      <Button color=\"red\" fluid onClick={reset}>\n        <Icon name=\"redo\" />\n        Reset\n      </Button>\n    </Card.Content>\n  </Card>\n);\n\nexport default Timer;\n","import { VFC } from \"react\";\nimport useTimer from \"hooks/use-timer\";\nimport Timer from \"components/Timer\";\n\nconst EnhancedTimer: VFC<{ limit: number }> = ({ limit }) => {\n  const [timeLeft, isPrime, reset] = useTimer(limit);\n  return <Timer limit={limit} timeLeft={timeLeft} isPrime={isPrime} reset={reset} />;\n};\nexport default EnhancedTimer;\n","import { VFC, useState } from \"react\";\nimport { Button, Card, Statistic } from \"semantic-ui-react\";\nimport \"./Counter.css\";\n\ntype Props = {\n  title?: string;\n  initialCount?: number;\n  countObserver?: (n: number) => void;\n};\n\nconst Counter: VFC<Props> = ({\n  title = \"count\",\n  initialCount = 0,\n  countObserver = (n: number) => console.log(n),\n}) => {\n  const [count, setCount] = useState(initialCount);\n  const increment = () => setCount((c) => c + 1);\n  const decrement = () => setCount((c) => (c >= 1 ? c - 1 : 0));\n\n  return (\n    <Card>\n      <Statistic className=\"number-board\">\n        <Statistic.Label>{title}</Statistic.Label>\n        <Statistic.Value>{count}</Statistic.Value>\n      </Statistic>\n      <Card.Content>\n        <div className=\"ui three buttons\">\n          <Button color=\"red\" onClick={() => countObserver(count)}>\n            Set\n          </Button>\n          <Button color=\"green\" onClick={increment}>\n            +1\n          </Button>\n          <Button color=\"blue\" onClick={decrement}>\n            -1\n          </Button>\n        </div>\n      </Card.Content>\n    </Card>\n  );\n};\n\nexport default Counter;\n","import { VFC, useState } from 'react';\nimport Timer from 'containers/Timer';\nimport Counter from './Counter';\nimport './App.css';\n\nconst App: VFC = () => {\n  const [limit, setLimit] = useState(60);\n\n  return (\n    <div className=\"container wrapper\">\n      <Counter title=\"limit\" initialCount={limit} countObserver={(c) => { setLimit(c) }} />\n      <Timer limit={limit} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}